// -------------------------------------------
//         - Concrete Lifetimes
// -------------------------------------------

fn main() {
    // Example 1:
    let i = 5;
    let j = i;
    println!("{i}");

    // Example 2:
    let str_1 = String::from("abc");
    let str_2 = str_1;
    //println!("str_1: {str_1}");

    // Example 3:
    let str_1 = String::from("abc");
    str_fn(str_1);
    //let str_2 = str_1;

    // Example 4:
    let i;
    {
        let j = 5;
        i = &j;
        println!("i: {i}");
    }

    // Example 5: non lexical lifetime
    ow NLL Helps:
Precision: NLL allows the compiler to understand that ref_1 is no longer used after its last usage. Therefore, the mutable borrow ref_2 is allowed even if it occurs later in the same block.
No Overlapping Borrows: The immutable borrow ref_1 ends before the mutable borrow ref_2 starts, preventing overlapping mutable and immutable borrows which would otherwise be disallowed.
Summary:
Non-Lexical Lifetimes improve the Rust borrow checker by making it more precise, allowing for more flexible and intuitive code. This precision reduces unnecessary borrow conflicts, making the code more ergonomic without sacrificing safety.
    let mut vec_1 = vec![6, 5, 8, 9];
    let ref_1 = &vec_1;
    println!("ref 1: {:?}", ref_1);
    let ref_2 = &mut vec_1;
    ref_2.push(3);
    println!("ref 2: {:?}", ref_2);
}

fn str_fn(s: String) {
    println!("s: {s}");
}
 
